spring.application.name=ServiceA
server.port=8080

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

# Circuit Breaker config
#resilience4j.circuitbreaker.instances.serviceB.register-health-indicator=true
#resilience4j.circuitbreaker.instances.serviceB.failure-rate-threshold=50
#resilience4j.circuitbreaker.instances.serviceB.minimum-number-of-calls=5
#resilience4j.circuitbreaker.instances.serviceB.automatic-transition-from-open-to-half-open-enabled=true
#resilience4j.circuitbreaker.instances.serviceB.wait-duration-in-open-state=5s
#resilience4j.circuitbreaker.instances.serviceB.permitted-number-of-calls-in-half-open-state=3
#resilience4j.circuitbreaker.instances.serviceB.sliding-window-size=10
#resilience4j.circuitbreaker.instances.serviceB.sliding-window-type=count-based

#resilience4j.retry.instances.serviceB.max-attempts=5
#resilience4j.retry.instances.serviceB.wait-duration=10s
#resilience4j.retry.instances.serviceB.retry-exceptions=java.io.IOException, java.net.SocketTimeoutException, org.springframework.web.client.ResourceAccessException
#resilience4j.retry.instances.serviceB.ignore-exceptions=java.lang.NullPointerException

#resilience4j.ratelimiter.instances.serviceB.limit-for-period=10
#resilience4j.ratelimiter.instances.serviceB.limit-refresh-period=20s
#resilience4j.ratelimiter.instances.serviceB.timeout-duration=5s

#resilience4j.bulkhead.instances.serviceB.max-concurrent-calls=13
#resilience4j.bulkhead.instances.serviceB.max-wait-duration=0

#minimum threads
#Meaning: Minimum number of threads that will always be kept alive in the bulkheadâ€™s thread pool, even if idle.
#Analogy: Imagine a call center that always keeps 2 operators on duty, even if no one is calling.
resilience4j.thread-pool-bulkhead.instances.serviceB.core-thread-pool-size=2

#max concurrent threads
#Meaning: Maximum number of threads the bulkhead can grow to when demand increases.
#Analogy: The call center can hire temporary staff up to a maximum of 5 operators if calls flood in.
resilience4j.thread-pool-bulkhead.instances.serviceB.max-thread-pool-size=5

#how many requests can wait in queue
#Meaning: Number of requests that can wait in a queue if all threads are busy.
#Analogy: Think of a waiting room where callers wait if all operators are busy.
resilience4j.thread-pool-bulkhead.instances.serviceB.queue-capacity=0

#how long extra threads stay alive when idle
#Meaning: How long extra (non-core) threads should stay alive when idle before being removed.
#Analogy: Extra temporary staff (beyond the 2 permanent operators) are fired if they sit idle too long.
resilience4j.thread-pool-bulkhead.instances.serviceB.keep-alive-duration=20ms
resilience4j.thread-pool-bulkhead.instances.serviceB.writable-stack-trace-enabled=true


#resilience4j.timelimiter.instances.serviceB.timeout-duration=2s
#resilience4j.timelimiter.instances.serviceB.cancel-running-future=true



